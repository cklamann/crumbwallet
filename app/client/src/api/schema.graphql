schema {
    query: Query
    mutation: RootMutation
}

type Card {
    answer: String
    choices: [String]
    created: String
    details: String
    handle: String!
    id: String!
    imageKey: String
    prompt: String
    tries: [try]
    type: Type
    updated: String
}

enum Type {
    qutotation
    standard
}

type Deck {
    cards: [Card]
    categories: [String]
    created: String
    id: String!
    name: String!
    updated: String
    private: Boolean!
    userId: String!
}

type Query {
    card(id: String!): Card
    deck(id: String!, userId: String): Deck
    decks(userId: String): [Deck]
}

type RootMutation {
    addCard(input: newCardInput!): id
    addTry(input: newTryInput!): tryAddedStatus
    createChessDiagram(input: ChessDiagramInput): ChessDiagramUrlResponse
    createDeck(input: NewDeckInput!): Deck
    deleteCard(deckId: String!, id: String!): cardDeletedStatus
    deleteDeck(id: String!): deleteDeckStatus
    updateCard(input: updateCardInput!): Card
    updateDeck(input: UpdateDeckInput!): Deck
    updateTry(input: updateTryInput!): Deck
}

type cardDeletedStatus {
    deleted: Boolean
}

type deleteDeckStatus {
    deleted: Boolean
}

type id {
    id: String
}

type try {
    correct: Boolean!
    created: String
    id: String!
    updated: String
    userId: String
}

type tryAddedStatus {
    added: Boolean
}

input NewDeckInput {
    categories: [String]
    name: String!
    private: Boolean!
    userId: String
}

input UpdateDeckInput {
    categories: [String]
    details: String
    private: Boolean
    id: String!
    name: String
}

input newCardInput {
    answer: String!
    choices: [String]
    deckId: String!
    details: String
    handle: String!
    imageKey: String
    prompt: String!
    type: Type
}

input newTryInput {
    cardId: String!
    correct: Boolean!
}

input updateCardInput {
    answer: String
    choices: [String]
    deckId: String!
    details: String
    handle: String
    id: String!
    type: Type
    imageKey: String
    prompt: String
}

input updateTryInput {
    cardId: String!
    correct: Boolean!
    id: String!
}

input ChessDiagramInput {
    pgn: String
    savePath: String
}

type ChessDiagramUrlResponse {
    key: String
}
